* Initialize package repositories
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize))
#+END_SRC
* Set default buffer settings
** Set initial buffer to text-mode
   #+BEGIN_SRC emacs-lisp
   (setq initial-major-mode 'text-mode)
   #+END_SRC
** Supress toolbar and menu bar
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   #+END_SRC
** Supress startup screen and clear scratch buffer
   #+BEGIN_SRC emacs-lisp
   (setq initial-scratch-message nil)
   (setq message-log-max nil)
   (setq inhibit-startup-screen t)
   (setq inhibit-startup-buffer-menu t)
   #+END_SRC
** Kill completions and messages buffers
   #+BEGIN_SRC emacs-lisp
   (kill-buffer "*Messages*")
   (add-hook 'minibuffer-exit-hook 
      '(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
            (kill-buffer buffer)))))   
   #+END_SRC
* Configure line number functionality
** Enable display-line-numbers-mode globally
   #+BEGIN_SRC emacs-lisp
   (cond
   ((string-equal system-type "windows-nt") (global-display-line-numbers-mode t))
   ((string-equal system-type "gnu/linux") (global-display-line-numbers-mode t)))
   #+END_SRC
** Enable hlinum
   #+BEGIN_SRC emacs-lisp
   ;; (require 'hlinum)
   ;; (hlinum-activate)
   #+END_SRC
** Supress display-line-numbers-mode in various minor modes
   #+BEGIN_SRC emacs-lisp
   (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
   (add-hook 'tetris-mode-hook (lambda() (display-line-numbers-mode-mode -1)))
   (add-hook 'snake-mode-hook (lambda() (display-line-numbers-mode -1)))
   (add-hook 'doctor-mode-hook (lambda() (display-line-numbers-mode -1)))
   #+END_SRC
* Terminal specific settings
** Enable mouse interactivity in terminal mode
   #+BEGIN_SRC emacs-lisp
   (xterm-mouse-mode t)
   #+END_SRC
* Indentation settings
** Fix indentation to 4 spaces per tab
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode t)
   (setq-default tab-width 4)
   (setq c-basic-offset 4)
   (setq backward-delete-char-untabify-method 'hungry)

   #+END_SRC
* Scrolling settings
** Move one line when cursor exits view
   #+BEGIN_SRC emacs-lisp
   (setq scroll-conservatively 101)
   #+END_SRC
** Move one line when scrolling with mouse
   #+BEGIN_SRC emacs-lisp
   (setq mouse-wheel-scroll-amound '(1))
   (setq mouse-wheel-progressive-speed nil)
   #+END_SRC
* Configure lockfiles and backup files
** Disable lock file generation
   #+BEGIN_SRC emacs-lisp
   (setq create-lockfiles nil)
   #+END_SRC
** Change save directory for backup files
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist `(("." . "~/saves")))
   #+END_SRC
* Appearance Settings
** Font settings
   #+BEGIN_SRC emacs-lisp
   (cond
   ((string-equal system-type "windows-nt")
   (set-face-attribute 'default nil
                    :family "consolas"
                    :height 110
                    :weight 'normal
                    :width 'normal))
   ((string-equal system-type "gnu/linux")
   (set-face-attribute 'default nil
                    :family "SourceCodePro-Regular"
                    :height 115
                    :weight 'normal
                    :width 'normal)))
   #+END_SRC
** Cursor settings
   #+BEGIN_SRC emacs-lisp
   (setq-default cursor-type 'bar)
   (set-cursor-color "#d742f4")
   #+END_SRC
* Other external packages
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
** Centaur tabs
   #+BEGIN_SRC emacs-lisp
   (require 'centaur-tabs)
   (centaur-tabs-mode t)
   ;; (global-set-key (kbd "C-7") 'centaur-tabs-add-tab)
   ;; (global-set-key (kbd "C-8") 'centaur-tabs-backward)
   ;; (global-set-key (kbd "C-9") 'centaur-tabs-forward)
   (setq centaur-tabs-style "alternate")
   (setq centaur-tabs-set-bar 'over)
   #+END_SRC
** Treemacs
   #+BEGIN_SRC emacs-lisp
   (global-set-key [f9] 'treemacs)
   #+END_SRC
** SLIME
   #+BEGIN_SRC emacs-lisp
   (cond
   ((string-equal system-type "windows-nt") (load (expand-file-name "c:/Users/ljenks/quicklisp/slime-helper.el")))
   ((string-equal system-type "gnu/linux") (load (expand-file-name "~/quicklisp/slime-helper.el"))))
   (setq inferior-lisp-program "alisp")
   #+END_SRC
** Org-bullets
   #+BEGIN_SRC emacs-lisp
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC
** Auto complete
   #+BEGIN_SRC emacs-lisp
   ;; (ac-config-default)
   ;; (global-auto-complete-mode t)
   ;; (ac-linum-workaround)
   #+END_SRC
** company-mode
   #+BEGIN_SRC emacs-lisp
   (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC
* My packages
** tldr
   #+BEGIN_SRC emacs-lisp
    ;; Main function. To call, use M-x tldr-newsletter
    (defun tldr-newsletter () (interactive)
 
        (switch-to-buffer (get-buffer-create "tldr-newsletter"))
        (with-current-buffer "tldr-newsletter"
            (goto-char (point-max))
 		   
            (cond
                ((string-equal system-type "windows-nt")
                    (setq curl-cmd "C:/Windows/System32/curl -s https://www.tldrnewsletter.com/archives/"))
                ((string-equal system-type "gnu/linux")
                    (setq curl-cmd "/usr/bin/curl -s https://www.tldrnewsletter.com/archives/")))
 
            ;; Insert latest tldr newsletter HTML webpage into the buffer
            (insert
                (shell-command-to-string (concat curl-cmd (get-url-suffix))))
            
 		   (replace-in-buffer "tldr-newsletter" "/sponsor" "https://www.tldrnewsletter.com/sponsor")
 		   (replace-in-buffer "tldr-newsletter" "/privacy" "https://www.tldrnewsletter.com/privacy")
 		   (replace-in-buffer "tldr-newsletter" "/terms" "https://www.tldrnewsletter.com/terms")
 		   (replace-in-buffer "tldr-newsletter" "/archives" "https://www.tldrnewsletter.com/archives")
 		   (replace-in-buffer "tldr-newsletter" "/rss" "https://www.tldrnewsletter.com/rss")
 
            ;; Render HTML content so it is readable to the user
            (shr-render-region (point-min) (point-max))
            (beginning-of-buffer)
            (read-only-mode 1)))
    
    ;; This function takes the name of a buffer, a string to replace, and a replacement string,
    ;; and replaces all instances of the string to replace in the given buffer with the new string
    (defun replace-in-buffer (buffer old new)
        (with-current-buffer buffer
            (let ((case-fold-search t)) ; or nil
                (goto-char (point-min))
 		       (while (search-forward old nil t)
 		           (replace-match new)))))
 
    ;; This function take a potentially single or double digit number
    ;; and returns a double digit string, preceding single digit numbers
    ;; with a zero.
    (defun format-number (month)
        (if (< month 10)
    	       (concat "0" (number-to-string month))
    	       (number-to-string month)))
    
    ;; This function returns a string representing a date, e.g.
    ;; "20191002" for Oct. 3rd, 2019. If it has passed 6AM EST,
    ;; the function returns the current date. If it is earlier than
    ;; 6AM EST, it returns yesterday's date.
    (defun get-url-suffix ()
        (setq time (parse-time-string (current-time-string nil "EST")))
        (setq time-list
    	       (if (>= (nth 2 time) 6)
    		       (list (nth 5 time)(nth 4 time)(nth 3 time))
    		       (list (nth 5 time)(nth 4 time)(- (nth 3 time) 1))))
        (setq url-suffix
    	       (concat
    		       (number-to-string (nth 0 time-list))
    		       (format-number (nth 1 time-list))
    		       (format-number (nth 2 time-list)))))
   #+END_SRC
* Keybindings
** Set indent and unindent
   #+BEGIN_SRC emacs-lisp
   ;;(define-key (current-global-map) (kbd "M-x indent")
       ;;(lookup-key (current-global-map) (kbd "C-u C-x TAB")))
   ;;(define-key (current-global-map) (kbd "M-x unindent")
       ;;(lookup-key (current-global-map) (kbd "C-u -4 M-x indent-rigidly")))
   #+END_SRC
* Copy/paste settings
** Enable copy/paste in/out of emacs
   #+BEGIN_SRC emacs-lisp
   (setq x-select-enable-clipboard t)
   #+END_SRC
